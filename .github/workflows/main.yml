name: CI-CD

# only run on pushes to main or pull requests
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
    # Allows you to run this workflow manually from the Actions tab

concurrency:
  group: ${{ github.workflow }}_${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  ###############################################################################################
  # Unit-Tests: Run unit tests using pytest
  ################################################################################################
  Unit-Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15 # Consider increasing timeout
    continue-on-error: true # dont fail the whole matrix if one fails
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest] 
        env: ["py310", "py311", "py312", "py313"]

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: ${{ matrix.env }}
          pixi-version: v0.41.3
          cache: true

      - name: Run pytest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pixi run -e ${{ matrix.env }} test -s -vv

      - name: Upload coverage report artifact to be used by Codecov
        # only upload if matrix.os is ubuntu-latest and matrix.python-version is 3.12
        if: matrix.os == 'ubuntu-latest' && matrix.env == 'py313'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: JUnit Test Summary
        id: pytest-summary
        uses: test-summary/action@v2
        with: 
          paths: .cache/test-results/**/*.xml
          show: "fail,skip"
        if: always()

  ################################################################################################
  # Codecov: Run codecov to check coverage
  ################################################################################################
  Code-Coverage:
    needs: Unit-Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage.xml artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: Use Codecov to track coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-report/coverage.xml
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella


  Semantic-Release:
    concurrency: release
    permissions:
      id-token: write
      actions: read
      contents: write
      packages: write
      issues: write
      pull-requests: write

    needs: Unit-Tests

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devel'

    # Set up operating system
    runs-on: ubuntu-latest

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    # Define job steps
    steps:
      # - uses: actions/create-github-app-token@v1
      #   id: app-token
      #   with:
      #     app-id: ${{ vars.SEMVERPOLICE_ID }}
      #     private-key: ${{ secrets.SEMVER_APP_KEY }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        id: release
        with:
          root_options: -v
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "gh-actions-semver"

  Publish-PyPi:
    needs: Semantic-Release
    if: needs.Semantic-Release.outputs.released == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code with tag ${{ needs.Semantic-Release.outputs.tag }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.Semantic-Release.outputs.tag }}

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: publish
          pixi-version: v0.41.3

      - name: Run build
        run: pixi run -e publish build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          verbose: true

  Test-Install:
    needs: Publish-PyPi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
        python-version: ["3.12", "3.11", "3.10", "3.13"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install using PyPi
        run: |
          pip install pybytesize==${{ needs.Semantic-Release.outputs.version }}
          python -c "import pybytesize; print(pybytesize.__version__)"